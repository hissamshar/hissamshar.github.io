[{"content":"Linux Kernal The Linux kernel is a free and open-source, Unix-like kernel widely used in computer systems around the world. Developed by Linus Torvalds in 1991, it was soon adopted as the kernel for the GNU operating system (OS), designed as a free alternative to Unix. Since the late 1990s, the Linux kernel has been included in numerous operating system distributions, many of which are referred to as Linux. One prominent example is Android, a Linux-based operating system widely used in mobile and embedded devices.\nThe majority of the kernel\u0026rsquo;s code is written in C, leveraging extensions provided by the GNU Compiler Collection (GCC) beyond standard C. Additionally, it includes assembly code for architecture-specific functions, such as optimizing memory usage and task execution. Architecturally, the Linux kernel is monolithic, meaning the entire OS operates within kernel space. However, it features a modular design, allowing software components to be integrated as modules, including dynamic loading.\nWhat Is A Kernel Module? A Linux kernel module is precisely defined as a code segment capable of dynamic loading and unloading within the kernel as needed. These modules enhance kernel capabilities without necessitating a system reboot. A notable example is seen in the device driver module, which facilitates kernel interaction with hardware components linked to the system.\n","permalink":"http://localhost:1313/posts/how-to-write-a-custom-kernel-module/","summary":"\u003ch2 id=\"linux-kernal\"\u003eLinux Kernal\u003c/h2\u003e\n\u003cp\u003eThe Linux kernel is a free and open-source, Unix-like kernel widely used in computer systems around the world. Developed by Linus Torvalds in 1991, it was soon adopted as the kernel for the GNU operating system (OS), designed as a free alternative to Unix. Since the late 1990s, the Linux kernel has been included in numerous operating system distributions, many of which are referred to as Linux. One prominent example is Android, a Linux-based operating system widely used in mobile and embedded devices.\u003c/p\u003e","title":"How to Write a Custom Kernel Module"},{"content":"What is it? gh is GitHub\u0026rsquo;s official command-line tool designed to extend Git\u0026rsquo;s functionality with GitHub-specific features.\nPurpose: Simplifies interaction with GitHub\u0026rsquo;s ecosystem directly from the terminal. Allows you to manage repositories and use GitHub features like issues, pull requests, and workflows.\nKey Features: GitHub-specific tasks:\nAuthentication: Easier login (gh auth login) without dealing with tokens manually. Repository Management: Create, fork, or clone repositories. Issues \u0026amp; Pull Requests: Manage issues, PRs, and comments directly. Actions: Manage and view GitHub Actions workflows. Works alongside Git for basic version control tasks. Use Case: Best for developers heavily using GitHub and its features (for example: pull requests, issues, and actions).\nHow it works Install gh:\n\u0026gt; yay -S github-cli Verify the installation:\n\u0026gt; gh --version Login with GitHub CLI (gh)\n\u0026gt; gh auth login Follow the interactive prompts to log in:\nChoose HTTPS or SSH for connection. Log in via a browser using a one-time code or SSH keys. Verify authentication:\n\u0026gt; gh auth status What\u0026rsquo;s best about it that you can install and use both Git and gh (GitHub CLI) seamlessly. Here\u0026rsquo;s how to set them up:\nInstall Git\n\u0026gt;sudo pacman -S git Check the installation:\n\u0026gt; git --version Using Git and gh Together You can now: Use Git for version control:\n\u0026gt; git clone https://github.com/username/repo.git \u0026gt; git add . \u0026gt; git commit -m \u0026quot;message\u0026quot; \u0026gt; git push ","permalink":"http://localhost:1313/posts/github-cli-githubs-official-command-line-tools/","summary":"\u003ch2 id=\"what-is-it\"\u003eWhat is it?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003egh\u003c/strong\u003e is GitHub\u0026rsquo;s official command-line tool designed to extend Git\u0026rsquo;s functionality with GitHub-specific features.\u003c/p\u003e\n\u003ch2 id=\"purpose\"\u003ePurpose:\u003c/h2\u003e\n\u003cp\u003eSimplifies interaction with GitHub\u0026rsquo;s ecosystem directly from the terminal. Allows you to manage repositories and use GitHub features like issues, pull requests, and workflows.\u003c/p\u003e\n\u003ch2 id=\"key-features\"\u003eKey Features:\u003c/h2\u003e\n\u003cp\u003eGitHub-specific tasks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAuthentication: Easier login (gh auth login) without dealing with tokens manually.\u003c/li\u003e\n\u003cli\u003eRepository Management: Create, fork, or clone repositories.\u003c/li\u003e\n\u003cli\u003eIssues \u0026amp; Pull Requests: Manage issues, PRs, and comments directly.\u003c/li\u003e\n\u003cli\u003eActions: Manage and view GitHub Actions workflows.\u003c/li\u003e\n\u003cli\u003eWorks alongside Git for basic version control tasks.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"use-case\"\u003eUse Case:\u003c/h2\u003e\n\u003cp\u003eBest for developers heavily using GitHub and its features (for example: pull requests, issues, and actions).\u003c/p\u003e","title":"GitHub CLI: GitHub's Official Command Line Tools"},{"content":"Connecting a Raspberry Pi 5 to a USB TTY cable is a common way to interact with it through a serial connection, especially for debugging or setting up the device without using a display.\nPrerequists\nRaspberry Pi 5. USB TTY (serial) cable. Computer with a terminal emulator (minicom/screen). GPIO pinout diagram of Raspberry Pi 5 (for reference). Power source for Raspberry Pi (optional if USB TTY can power it, though not recommended). Before Starting! Issuse with firmware UART does NOT work on the RPI5 from the factory. We will need a firmware update to fix this that prevents the dtoverlays for UARTs from working.\nInstall rpi-update with the following commands:\n\u0026gt; sudo curl -L --output /usr/bin/rpi-update https://raw.githubusercontent.com/Hexxeh/rpi-update/master/rpi-update \u0026amp;\u0026amp; sudo chmod +x /usr/bin/rpi-update Then update the firmware on your RPI5 with:\n\u0026gt; sudo rpi-update Enable UART To manually configure UART, you can edit the config.txt file.\nEdit /boot/firmware/config.txt and add:\n\u0026gt; enable_uart=1 How to Connect Locate the GPIO Pins Find the GPIO header on the Raspberry Pi 5. Identify the following pins: GND (Ground): Usually black wire on the USB TTY cable. TX (Transmit): Sends data from the Pi to the computer. RX (Receive): Receives data from the computer to the Pi.\nUse a GPIO pinout chart to locate these pins. For Raspberry Pi 5, it will likely be similar to previous models. Making connections You will need to connect:\nGND with Ground - Pin# 06 TX with GPIO14 - Pin# 08 RX with GPIO15 - Pin# 10 Plug the USB TTY Cable into the Computer\nInsert the USB end of the TTY cable into your computer. The cable will create a virtual COM port (e.g /dev/ttyUSB0). Configure and Access Serial Console\nOpen a terminal.\nIdentify the port with:\n\u0026gt; ls /dev/ttyUSB* Use a terminal emulator like screen or minicom to connect:\n\u0026gt; screen /dev/ttyUSB0 115200 *Replace /dev/ttyUSB0 with the actual port name.\nTurn on the Raspberry Pi. If everything is set up correctly, you should see boot messages in the terminal. Log in to the Pi using the default username (pi) and password (raspberry), or your custom credentials. You should see something similar to this.\nThis is it! You have done it. Congrats!\n","permalink":"http://localhost:1313/posts/how-to-connect-a-raspberry-pi-5-to-usb-tty-cable/","summary":"\u003cp\u003eConnecting a Raspberry Pi 5 to a USB TTY cable is a common way to interact with it through a serial connection, especially for debugging or setting up the device without using a display.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePrerequists\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRaspberry Pi 5.\u003c/li\u003e\n\u003cli\u003eUSB TTY (serial) cable.\u003c/li\u003e\n\u003cli\u003eComputer with a terminal emulator (minicom/screen).\u003c/li\u003e\n\u003cli\u003eGPIO pinout diagram of Raspberry Pi 5 (for reference).\u003c/li\u003e\n\u003cli\u003ePower source for Raspberry Pi (optional if USB TTY can power it, though not recommended).\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"before-starting\"\u003e\u003cstrong\u003eBefore Starting!\u003c/strong\u003e\u003c/h3\u003e\n\u003ch3 id=\"issuse-with-firmwarehttpsforumsraspberrypicomviewtopicphpt361397p2171244\"\u003e\u003cstrong\u003e\u003ca href=\"https://forums.raspberrypi.com/viewtopic.php?t=361397#p2171244\"\u003eIssuse with firmware\u003c/a\u003e\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eUART does NOT work on the RPI5 from the factory. We will need a firmware update to fix this that prevents the dtoverlays for UARTs from working.\u003c/p\u003e","title":"How to Connect a Raspberry PI 5 to USB TTY Cable"},{"content":"Hosting a website on GitHub Pages with Hugo involves the following steps:\nCreating a website 1. Install Hugo and git\n\u0026gt; sudo pacman -S Hugo 2. Create a new Hugo site\n\u0026gt; hugo new site your-website 3. Add a Theme\nNavigate to your website directory and add a theme. You can choose one from the Hugo Themes .\n\u0026gt; cd your-website \u0026gt; git init \u0026gt; git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod Now you will need to update the hugo.toml file for them to take effect. To do so you can either echo or addd it in the file.\n\u0026gt; echo \u0026quot;theme = 'hugo-PaperMod'\u0026quot; \u0026gt;\u0026gt; hugo.toml To view the website you can run it locally using Hugo\u0026rsquo;s development server to view the site. You can add -D to see your drafts.\n\u0026gt; hugo server 3. Add Content\nTo add a new page to your site.\n\u0026gt; hugo new content content/posts/yout-first-post.md This is it You have done it. YAY!\nHosting it on GitHub 1. Create a GitHub repository.\nClick the + icon in the top-right corner of:\u0026gt; [!WARNING] the GitHub interface and select New repository. Enter a repository name: yourusername.github.io Click Create repository. 2. Add Files for Your website\nClone the repository locally using Git:\ngit clone https://github.com//.git\nAdd your static site files (generated by Hugo) to the repository. Commit and push the changes:\n\u0026gt; git add -A \u0026gt; git commit -s -m \u0026quot;Initial commit\u0026quot; \u0026gt; git push origin main 3. Configure the Repository for GitHub Pages\nGo to the Settings tab of your new repository. Scroll down to the Pages section. Settings \u0026gt; Pages. In the center of your screen you will see this: Build and development Change the Source to GitHub Actions. 4. Create a file named hugo.yaml in a directory named .github/workflows.\n\u0026gt; mkdir -p .github/workflows \u0026gt; cd ./github/workflows touch hugo.yaml 5. Add content in the YAML file.\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.141.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build with Hugo env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production TZ: America/Los_Angeles run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v3 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 5. Commit and push your GitHub repository.\n\u0026gt;git add -A \u0026gt;git commit -m \u0026quot;Create hugo.yaml\u0026quot; \u0026gt;git push 6. Deployment status From GitHub’s main menu, choose Actions. When GitHub has finished building and deploying your site, the color of the status indicator will change to green.\nStep 5: Verify Your GitHub Pages Site\nThe site will be live at https://yourusername.github.io.\n","permalink":"http://localhost:1313/posts/hosting-a-website-on-github-pages-with-hugo/","summary":"\u003cp\u003eHosting a website on GitHub Pages with Hugo involves the following steps:\u003c/p\u003e\n\u003ch1 id=\"creating-a-website\"\u003eCreating a website\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003e1. Install Hugo and git\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; sudo pacman -S Hugo\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e2. Create a new Hugo site\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; hugo new site your-website\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e3. Add a Theme\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNavigate to your website directory and add a theme. You can choose one from the \u003ca href=\"https://themes.gohugo.io/\"\u003eHugo Themes\u003c/a\u003e .\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; cd your-website\n\u0026gt; git init \n\u0026gt; git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow you will need to update the hugo.toml file for them to take effect. To do so you can either \u003cem\u003eecho\u003c/em\u003e or addd it in the file.\u003c/p\u003e","title":"Hosting a Website on Github Pages With Hugo"},{"content":"KVM Kernel-based Virtual Machine is a free and open-source virtualization module in the Linux kernel that allows the kernel to function as a hypervisor.\nInstallation For updates, run the following command:\n$ sudo pacman -Syu QEMU/KVM installation: We\u0026rsquo;ll install qemu and all the utils required:\n$ sudo pacman -S qemu vde2 ebtables iptables-nft nftables dms masq bridge-utils ovmf swptm Virtual Machine Manager installation: The virt-manager application is a graphical user interface for managing virtual machines through libvirt. It primarily targets KVM VMs.\n$ sudo pacman -S virt-manager Now everything is set to work. We can move towards downloading archlinux .iso file.\nDownload .iso file: Head towards: https://archlinux.org/download/ Scroll through and look for the server closest to you. Download archlinux-2024.10.01-x86_64.iso file. Setting up: Open terminal and run the following command:\n$ virt-manager You will see an interface similar to this:\nClick on \u0026lsquo;create a new virtual machine\u0026rsquo; (option with star). Select \u0026lsquo;Local install media\u0026rsquo;. Browse to your \u0026lsquo;archlinux-2024.10.01-x86_64.iso\u0026rsquo;. Add your desired VM configuration and create a disk image. Boot Menu: You will be prompted to a boot menu.\nSelect the topmost option to start the installation process. Archlinux Installer: You will be prompted to a terminal. The first step is to check if you are connected to the internet.\nRun:\n# ip addr show If it shows an IP address and says \u0026lsquo;UP\u0026rsquo;, that means you are good to go.\nIf not: You will need to connect to the internet using the \u0026lsquo;iwctl\u0026rsquo; method for Wi-Fi.\n# iwctl To search networks in your vicinity:\n[iwd]# station [your_wifi_interface] get-networks Get the name of the network you want to connect to. Exit from this prompt using \u0026rsquo;exit\u0026rsquo;.\nTo connect to the desired Wi-Fi network, run:\n# iwctl --passphrase \u0026#34;[wifi_password]\u0026#34; station [your_wifi_interface] connect [wifi_name] You can again run ip addr show to check if you are connected to the network.\nNow you can run the installation command. We\u0026rsquo;ll be using the archinstall method.\n# archinstall You will be prompted to an interface similar to this:\nWe will install Arch using this interface. Go through each option:\nArchinstall language: Choose your preferred language. Mirrors: Select the mirror region closest to you. Use \u0026lsquo;/\u0026rsquo; to search. Locales: Set language and keyboard layout. Disk configuration: Choose Best-effort default partition to format the system. Bootloader: Use the default \u0026lsquo;Grub\u0026rsquo; option. Swap: Select Swap on zram (default). Hostname: Leave as it is. Root password: Set the password for sudo/root privileges. User account: Set up a user account. Profile: Select Desktop. It includes essential packages. Others include Minimal, Server, and Xorg. In Desktop, select your desktop environment. We\u0026rsquo;ll use Gnome for simplicity.\nAudio: Use PipeWire (default) or PulseAudio. Kernels: Use the linux kernel. Additional packages: Install any required packages. Network Configuration: Use NetworkManager for a GUI in Gnome. Timezone: Set the timezone closest to you and enable time sync. Press Install. Congratulations! You\u0026rsquo;ve successfully installed Arch Linux.\n","permalink":"http://localhost:1313/posts/arch_kvm/","summary":"\u003ch1 id=\"kvm\"\u003eKVM\u003c/h1\u003e\n\u003cp\u003eKernel-based Virtual Machine is a free and open-source virtualization module in the Linux kernel that allows the kernel to function as a hypervisor.\u003c/p\u003e\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eFor updates, run the following command:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ sudo pacman -Syu\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"qemukvm-installation\"\u003eQEMU/KVM installation:\u003c/h3\u003e\n\u003cp\u003eWe\u0026rsquo;ll install qemu and all the utils required:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ sudo pacman -S qemu vde2 ebtables iptables-nft nftables dms masq bridge-utils ovmf swptm\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"virtual-machine-manager-installation\"\u003eVirtual Machine Manager installation:\u003c/h3\u003e\n\u003cp\u003eThe virt-manager application is a graphical user interface for managing virtual machines through libvirt. It primarily targets KVM VMs.\u003c/p\u003e","title":"archlinux installation in hypervisor through QEMU/KVM"},{"content":"","permalink":"http://localhost:1313/posts/github-cli-githubs-official-command-line-tool/","summary":"","title":""}]